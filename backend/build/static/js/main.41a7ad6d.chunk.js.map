{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["gapi","window","DISCOVERY_DOCS","Form","props","handleSummary","event","setState","summary","target","value","handleLocation","location","handleDescription","description","handlestartDate","startDate","handleendDate","endDate","handleSubmit","load","console","log","client","init","apiKey","clientId","discoveryDocs","scope","auth2","getAuthInstance","signIn","then","state","start","date","timeZone","end","recurrence","attendees","email","reminders","useDefault","overrides","method","minutes","calendar","events","insert","calendarId","resource","execute","open","htmlLink","preventDefault","className","onSubmit","this","type","onChange","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41a7ad6d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nvar gapi = window.gapi;\r\n\r\nvar CLIENT_ID =\r\n  \"648335234421-7rqlke8p268cbb605cidlqk43vppjbv5.apps.googleusercontent.com\";\r\nvar API_KEY = \"AIzaSyAWTTwWdM1NH7EJYcu_mNqO8Mwzxfwbq0o\";\r\nvar DISCOVERY_DOCS = [\r\n  \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\r\n];\r\nvar SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\r\n\r\nconst handleClick = () => {};\r\n\r\nexport class Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      summary: \"\",\r\n      location: \"\",\r\n      description: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n    };\r\n  }\r\n\r\n  handleSummary = (event) => {\r\n    this.setState({\r\n      summary: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleLocation = (event) => {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleDescription = (event) => {\r\n    this.setState({\r\n      description: event.target.value,\r\n    });\r\n  };\r\n\r\n  handlestartDate = (event) => {\r\n    this.setState({\r\n      startDate: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleendDate = (event) => {\r\n    this.setState({\r\n      endDate: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    // alert(`${this.state.startDate} ${this.state.endDate}`);\r\n    gapi.load(\"client:auth2\", () => {\r\n      console.log(\"loaded client\");\r\n\r\n      gapi.client.init({\r\n        apiKey: API_KEY,\r\n        clientId: CLIENT_ID,\r\n        discoveryDocs: DISCOVERY_DOCS,\r\n        scope: SCOPES,\r\n      });\r\n\r\n      gapi.client.load(\"calendar\", \"v3\", () => console.log(\"bam!\"));\r\n\r\n      gapi.auth2\r\n        .getAuthInstance()\r\n        .signIn()\r\n        .then(() => {\r\n          var event = {\r\n            summary: this.state.summary,\r\n            location: this.state.location,\r\n            description: this.state.description,\r\n            start: {\r\n              //   dateTime: \"2020-09-30T09:00:00-07:00\",\r\n              date: this.state.startDate,\r\n              timeZone: \"America/Los_Angeles\",\r\n            },\r\n            end: {\r\n              //   dateTime: \"2020-10-01T17:00:00-07:00\",\r\n              date: this.state.endDate,\r\n              timeZone: \"America/Los_Angeles\",\r\n            },\r\n            recurrence: [\"RRULE:FREQ=DAILY;COUNT=2\"],\r\n            attendees: [\r\n              { email: \"lpage@example.com\" },\r\n              { email: \"sbrin@example.com\" },\r\n            ],\r\n            reminders: {\r\n              useDefault: false,\r\n              overrides: [\r\n                { method: \"email\", minutes: 24 * 60 },\r\n                { method: \"popup\", minutes: 10 },\r\n              ],\r\n            },\r\n          };\r\n\r\n          var request = gapi.client.calendar.events.insert({\r\n            calendarId: \"primary\",\r\n            resource: event,\r\n          });\r\n\r\n          request.execute((event) => {\r\n            console.log(event);\r\n            window.open(event.htmlLink);\r\n          });\r\n        });\r\n    });\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"my-container\">\r\n        <h1 className=\"display-3\">Add events to your Google Calender! :)</h1>\r\n        <p className=\"lead\">\r\n          The google might say it's unauthorized app since my google project is\r\n          not verified! :c\r\n        </p>\r\n        <p>Created by Shujja C:</p>\r\n        <br />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Summary</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.summary}\r\n              onChange={this.handleSummary}\r\n            />\r\n            <br />\r\n            <label>Location</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.location}\r\n              onChange={this.handleLocation}\r\n            />\r\n            <br />\r\n            <label>Description</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.description}\r\n              onChange={this.handleDescription}\r\n            ></textarea>\r\n            <br />\r\n            <label>Start Date</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"date\"\r\n              value={this.state.startDate}\r\n              onChange={this.handlestartDate}\r\n            />{\" \"}\r\n            <br />\r\n            <label>End Date</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"date\"\r\n              value={this.state.endDate}\r\n              onChange={this.handleendDate}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-success\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}